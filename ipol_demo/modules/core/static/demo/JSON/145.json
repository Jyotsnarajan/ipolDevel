{ 
  "general": { 
    "demo_title"            :  "A Demosaicking Algorithm with Adaptive Inter-Channel Correlation",
    "input_description"     : "Please select or upload the image pair to register.",
    "param_description"     : "",
    "xlink_article"         : "http://www.ipol.im/pub/art/2015/145/"
  }, 
  "build": [
    {
      "build_type"    : "make",
      "url"           : "http://www.ipol.im/pub/art/2015/145/DB_demosaicking_code.tar.gz", 
      "srcdir"        : "DB_demosaicking_code",
      "__prepare_make__"  : "sed -i -e 's/CXXFLAGS  =/CXXFLAGS  = -include cstring /g' Makefile; mkdir obj; mkdir bin",
      "binaries"      : [ [".","demosaicking_ipol"], [".","imdiff_ipol"] ],
      "flags"         : "OMP=1 -j4"
    } ]
  ,
  "inputs": [  
      {
          "type"            : "image", 
          "description"     : "first image",
          "max_pixels"      : "700 * 700",
          "max_weight"      : "10 * 1024 * 1024",
          "dtype"           : "3x8i",
          "ext"             : ".png"
      }
    ],
  "params": [
    {
        "id"            : "guessbeta",
        "type"          : "checkbox",
        "label"         : "Compute &beta; dynamically",
        "default_value" : true
    },
    {
        "visible"       : "!params.guessbeta",
        "id"            : "beta",
        "type"          : "range", 
        "label"         : "&beta;",
        "comments"      : [ "Optimal value for Kodak dataset: &beta;=1.0 <br/>",
                            "Optimal value for McMaster (IMAX) images: &beta;=0.7" ],
        "values"        : { "min":0.7, "max":1.0, "step":0.01, "default":0.7 }
    }
  ],
  "run": [ 
    ["guessbeta",
        "# need to create the 'beta' parameter as if it was already present",
        "python:self.algo_params['beta']=0",
        "# the local variable is the one to modify, it will then be copied to algo_params...",
        "python:beta=0"
    ],
    "demosaicking_ipol input_0.sel.png mosaicked.png demosaicked.png $beta >beta.txt 2>stdout.txt",
    "imdiff_ipol input_0.sel.png demosaicked.png diff.png >rmse.txt 2>stdout.txt",
    "# Read the rmse.txt file",
    "python:f = open('rmse.txt', 'r')",
    "python:self.algo_info['rmse']='%.2f' % float(f.readline().split(':', 1)[1])",
    "python:f.close()",
    ["guessbeta",
        "# Read beta value",
        "python:f = open('beta.txt', 'r')",
        "python:l=f.readline()",
        "python:beta = '%.2f' % float(l.split(':', 1)[1])",
        "python:f.close()"]
   ],
  "archive":
    {
      "files" : { 
                  "input_0.sel.png"   : "original image",
                  "input_1.orig.png"  : "uploaded #2",
                  "mosaicked.png"     : "mosaicked image",
                  "demosaicked.png"   : "demosaicked image",
                  "diff.png"          : "difference original-demosaicked"
                },
      "params": [ "beta" ],
      "info"  : { "rmse" : "RMSE" }
    }
  ,
  "results": [
    {
      "type"          : "gallery",
      "label"         : [ "'<h3>Results</h3> ",
            "<p>Images obtained with parameter &beta; = '+ params.beta + ",
            "(params.guessbeta?' computed dynamically':'') +",
            "'</p>'"],
      "contents"      : 
        {   
        "Input"         : "input_0.sel.png", 
        "Demosaicked"   : "demosaicked.png", 
        "Mosaicked"     : "mosaicked.png", 
        "'Difference Input-Demosaicked <br/> RMSE '+info.rmse" : "diff.png"
        },
      "options" : { "minheight" : 400 }
    },
    {
        "type"      : "file_download",
        "label"     : "<h3>Images at native resolution</h3>",
        "contents"  : {
                "input"             : "input_0.sel.png",
                "demosaicked"       : "demosaicked.png"
            }
    }
  ]

}