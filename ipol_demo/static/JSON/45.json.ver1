{ 
  'general': { 
     'demo_title':             'Analysis and Extension of the Ponomarenko et al Method, Estimating a Noise Curve from a Single Image',
     'demo_input_description': 'This algorithm estimates the amount of noise (standard deviation) of the given image.<br/><br/>

The test images are divided into three groups:<br/>
<br/>
<ul>
<li>Raw images down-scaled to have one raw value (R, G, B) at each pixel. Their raw values are multiplied by 32 in order to be able to visualize them. In the list, they are are refered to as <b>raw</b>.</li>
<li>High SNR raw images, downscaled by 8 and the color channels averaged, so they are nearly noiseless. In the list, they are refered to as <b>no noise</b>.</li>
<li>JPEG images, being denoised by JPEG at the first scales. In the list, they are refered to as <b>JPEG</b>.</li>
</ul>'
  }, 
  'params': [
    {
      'id'            : 'percentile',
      'type'          : 'selection_collapsed', 
      'label'         : 'Percentile:',
      'default_value' : {'-999.999':'Auto (algorithm s K)', '0.0001':'0.01%', '0.0010':'0.1%', '0.0050':'0.5%', '0.0500':'5%', '0.1000':'10%', '0.5000':'50%'} },
      'type_format'   : 'float'
    },
    {
      'id'            : 'block',
      'type'          : 'selection_collapsed', 
      'label'         : 'Block:',
      'default_value' : {'3':'3x3', '5':'5x5', '7':'7x7', '8':'8x8', '11':'11x11', '15':'15x15', '21':'21x21'},
      'type_format'   : 'float'
    },
    {
      'id'            : 'mean_type',
      'type'          : 'selection_collapsed', 
      'label'         : 'Mean of blocks computation:',
      'default_value' : {'1':'Mean', '2':'Median'},
      'type_format'   : 'float'
    },    
    {
      'id'            : 'curvefilter',
      'type'          : 'selection_collapsed', 
      'label'         : 'Curve filter iterations:',
      'default_value' : {'0':'None', '1':'1 iteration', '2':'2 iterations', '3':'3 iterations', '4':'4 iterations', '5':'5 iterations', '6':'6 iterations', '7':'7 iterations'},    
      'type_format'   : 'float'
    },        
    {
      'id'            : 'removeequals',
      'type'          : 'selection_collapsed', 
      'label'         : 'Treatment of groups (2x2) of equal pixels:',
      'default_value' : {'0':'Use all the pixels in the image', '1':'Ignore that kind of pixels'},
      'type_format'   : 'float'
    },        
    {
      'id'            : 'bins',
      'type'          : 'range', 
      'label'         : 'Number of bins (0 = automatic selection):',
      'default_value' : '0',
      'type_format'   : 'string'
    },            
    {
      'id'            : 'noise_variance',
      'type'          : 'label', 
      'label'         : 'Noise variance(<i>A</i>+<i>B</i><b>u</b>, where <b>u</b> is the input noisy image. Set <i>B</i>=0 for uniform noise):',
      'default_value' : 'A',
      'type_format'   : 'string'
    },
    {
      'id'            : 'anoise',
      'type'          : 'range', 
      'label'         : 'A:',
      'default_value' : '0',
      'type_format'   : 'string'
    },
    {
      'id'            : 'bnoise',
      'type'          : 'range', 
      'label'         : 'B:',
      'default_value' : '0',
      'type_format'   : 'string'
    }
  ],
  'results': [
    {
      'id'            : 'od1',
      'type'          : 'html_text', 
      'default_value' : '<h2>Parameters</h2>
<ul>
  <li><b>Percentile: </b>${percentile}.</li>
  <li><b>Block: </b>${block}x${block}.</li>
  <li><b>Number of filtering iterations: </b>${curvefilter}.</li>
  <li><b>Remove groups of equal pixels: </b>${removeequals}.</li>
  <li><b>Number of bins: </b>${bins}.</li>
  <li><b>Computation of the intensity of the bin: </b>${mean_type} of block averages.</li>
  <li><b>Added noise of variance: </b>${anoise} + ${bnoise} <b>U</b></li>
</ul>'
    },
    {
      'id'            : 'od1',
      'type'          : 'run_again', 
      'default_value' : 'Run'
    },
    {
      'id'            : 'od2', 
      'type'          : 'gallery',
      'label'         : 'Input image:',
      'default_value' : 'Input:scale_s0.png'
    },
    {
      'id'            : 'od3',
      'type'          : 'html_text', 
      'default_value' : 'Additional noise of variance = ${anoise} + ${bnoise}u.<br/>
Note that here the image may be showed with a size different from the original to help looking at the results.<br/>'
    },    
    {
      'id'            : 'od3', 
      'type'          : 'gallery',
      'label'         : '* Noise curve for scale S${scale}:',
      'default_value' : 'Curve:curve_s0.png'
    },
    {
      'id'            : 'od4', 
      'type'          : 'file_download', 
      'label'         : 'You can download the estimations given by the algorithm at each scale. The format of these text files is compatible with <a href="http://www.gnuplot.info/">gnuplot</a>: ',
      'default_value' : 'Scale 0:estimation_s0.txt'
    }
  ],
  'code': [
    {
      'url': 'http://www.ipol.im/pub/art/2013/45/ponomarenko_v4.zip',
      'compilation_line': 'cd ponomarenko_v4/fnoise; make; cd ../subscale; make; cd ../ponomarenko; make; cd ..; cp ./fnoise/fnoise ../../bin; cp ./subscale/subscale ../../bin; cp ./ponomarenko/ponomarenko ../../bin; cp ./scripts/writeNoiseCurve.sh ../../bin'
    }
  ],
  'run': [
     'fnoise -A$anoise -B$bnoise input_0.sel.png scale_s0.rgb',
     'fnoise -A$anoise -B$bnoise -t input_0.sel.png scale_s0.png',
     'subscale -s2 scale_s0.rgb scale_s1.rgb',
     'ponomarenko -p$percentile -b$bins -w$block -m$mean_type -g$curvefilter',
     'writeNoiseCurve.sh estimation_s0.txt 3 curve_s0.png'
  ]
}