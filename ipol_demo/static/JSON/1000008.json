{ 
  "general": { 
    "demo_title"            : "Retinex Poisson Equation: a Model for Color Perception",
    "input_description"     : [ "" ],
    "param_description"     : [ "" ],
    "enable_crop"           : true,
    "xlink_article"         : "http://www.ipol.im/pub/art/2011/lmps_rpe/"
  }, 
  "build": [
    {
      "build_type"    : "make",
      "url"           : "http://www.ipol.im/pub/art/2011/lmps_rpe/retinex_pde.tar.gz", 
      "srcdir"        : "retinex_pde",
      "binaries"      : [ [".","retinex_pde"] ],
      "prepare_make"  : "sed -i -e 's/-Werror//g' -e 's/-lfftw3f/-lfftw3f -lm/g' makefile",
      "flags"         : "-j4"
    } ]
  ,
  "inputs": [ 
      {
          "type"            : "image", 
          "description"     : "input",
          "max_pixels"      : "700*700",
          "max_weight"      : "10*1024*1024",
          "dtype"           : "3x8i",
          "ext"             : ".png"
      }
    ],
  "params": [
    {
      "id"           : "t",
      "label"        : "<i>t</i> &nbsp; &isin; [0, 255]",
      "type"         : "range",
      "values"       : { "min":0, "max":255, "step":0.1, "default": 4 }
    }
  ]
  ,
  "run": [ 
    "python:primes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, 28, 30, 32, 35, 36, 40, 42, 45, 48, 49, 50, 54, 56, 60, 63, 64, 70, 72, 75, 80, 81, 84, 90, 96, 98, 100, 105, 108, 112, 120, 125, 126, 128, 135, 140, 144, 147, 150, 160, 162, 168, 175, 180, 189, 192, 196, 200, 210, 216, 224, 225, 240, 243, 245, 250, 252, 256, 270, 280, 288, 294, 300, 315, 320, 324, 336, 343, 350, 360, 375, 378, 384, 392, 400, 405, 420, 432, 441, 448, 450, 480, 486, 490, 500, 504, 512, 525, 540, 560, 567, 576, 588, 600, 625, 630, 640, 648, 672, 675, 686, 700, 720, 729, 735, 750, 756, 768, 784, 800, 810, 840, 864, 875, 882, 896, 900, 945, 960, 972, 980, 1000, 1008, 1024]",
    "python:img = image(self.work_dir + 'input_0.sel.png')",
    "python:size = img.size",
    "python:def closest_prime(primes=None, number=1): return min(primes, key=lambda x:abs(x-number))",
    "python:newsize = (closest_prime(primes, size[0]), closest_prime(primes, size[1]))",
    "python:img.resize(newsize);",
    "python:img.save(self.work_dir + 'input_1.png')",
    "retinex_pde $t input_1.png output_1.png"
  ]
  ,
  "archive":
    {
      "files" : { 
                  "input_0.orig.png"     : "uploaded image",
                  "input_1.png"          : "rescaled image",
                  "output_1.png"         : "result image"
                },
      "params" :  [ "t" ]
    }
  ,
  "results": [
    {
      "type"          : "gallery",
      "contents"      : {
        "Original"  : "input_1.png",
        "Processed" : "output_1.png"
      },
      "style"         : "'height:'+Math.max(sizeY*ZoomFactor)+'px'"
    }
  ]

}