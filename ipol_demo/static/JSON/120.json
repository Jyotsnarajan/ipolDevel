{ 
  "general": { 
    "demo_title"            : "Parameter-Free Fast Pixelwise Non-Local Means Denoising",
    "input_description"     : [
      "To use correctly this demo, it is advised to upload good quality noiseless images.  The algorithm will add to the image a white noise with the standard deviation you will select. The denoising algorithm uses only the knowledge of the standard deviation of the noise." ],
    "param_description"     : [
            "<p> ",
            "The algorithm is run in 2 steps:",
            "<ol>",
                "<li> a Gaussian noise is added to the input image;</li>",
                "<li> the parameter-free fast pixelwise Non-Local Means algorithm is used to denoise the image.</li> ",
            "</ol>",
            "</p>" 
        ],
    "xlink_article"         : "http://www.ipol.im/pub/art/2014/120/"
  }, 
  "build": [
    {
      "build_type": "make",
      "url"       : "http://www.ipol.im/pub/art/2014/120/nlmp_1.2.tgz", 
      "srcdir"    : "nlmp_1.2",
      "prepare_make"  : "sed -i -e 's/-Werror//g' Makefile",
      "binaries"  : [ [".","NLMeansP"], [".","img_mse_ipol"], [".","img_diff_ipol"] ],
      "flags"     : "opti OMP=1 -j4"
    }]
  ,
  "inputs": [ 
      {
          "type"            : "image", 
          "description"     : "input",
          "max_pixels"      : "1024 * 1024",
          "max_weight"      : "10 * 1024 * 1024",
          "dtype"           : "3x8i",
          "ext"             : ".png"
      }
    ],
  "params": [
    {
      "id"            : "sigma",
      "type"          : "selection_collapsed", 
      "label"         : "Level (standard deviation) of additive Gaussian noise",
      "values"        : {   "2":"2",   "5":"5",  "10":"10","15":"15","20":"20",
                            "25":"25","30":"30",
                            "35":"35","40":"40", "50":"50","60":"60","70":"70",
                            "80":"80","90":"90","100":"100"},
      "default_value" : "10"
    }
  ],
  
  "run": [
    "#--- noisy and denoised images",
    "NLMeansP input_0.sel.png $sigma input_1.png output_1.png",
    "#--- compute image differences",
    "img_diff_ipol input_0.sel.png output_1.png $sigma output_2.png",
    "#--- estimate MSE and PSNR",
    "img_mse_ipol input_0.sel.png output_1.png >stdout.txt",
    "#--- Resize for visualization (new size of the smallest dimension = 200)",
    "python:(sizeX, sizeY) = image(self.work_dir + 'input_0.sel.png').size",
    "python:zoomfactor = max(1, int(math.ceil(200.0/min(sizeX, sizeY))))",
    "python:(sizeX, sizeY) = (zoomfactor*sizeX, zoomfactor*sizeY)",
    "python:has_zoom=zoomfactor>1",
    [ "has_zoom",
        "convert -filter point -resize ${sizeX}x${sizeY} input_0.sel.png  input_0.sel_zoom.png",
        "convert -filter point -resize ${sizeX}x${sizeY} input_1.png      input_1_zoom.png",
        "convert -filter point -resize ${sizeX}x${sizeY} output_1.png     output_1_zoom.png",
        "convert -filter point -resize ${sizeX}x${sizeY} output_2.png     output_2_zoom.png"
    ],
    "#--- save algorithm information",
    "python:self.algo_info['displayheight'] = sizeY",
    "python:self.algo_info['has_zoom'] = has_zoom",
    "python:self.algo_info['zoomfactor'] = zoomfactor"
  ],
  "archive":
    {
      "files" : { "input_0.orig.png"        : "uploaded image",
                  "input_0.sel.png"         : "selected subimage",
                  "input_1.png"             : "noisy image",
                  "output_1.png"            : "denoised image",
                  "output_2.png"            : "difference image"
                },
      "params" :  [ "sigma" ]
    },
  "results": [
    {
        "type"      : "html_text",
        "visible"   : "info.has_zoom",
        "contents"  : [ "<p>For visualization, the images are displayed with {{info.zoomfactor}}&times; pixel duplication.</p>" ]
    },
    {
        "type"      : "file_download",
        "label"     : "<p>Results at native resolution can be downloaded here:</p>",
        "contents"  : {
                "noisy"          : "input_1.png",
                "denoised"       : "output_1.png",
                "original"       : "input_0.sel.png",
                "difference"     : "output_2.png"
            }
    },
    {
      "type"          : "gallery",
      "label"         : [ "<h2>Images</h2>" ],
      "contents"      : 
        {
            "info.has_zoom?Noisy"              : "input_1_zoom.png",
            "info.has_zoom?Denoised"           : "output_1_zoom.png",
            "info.has_zoom?Original"           : "input_0.sel_zoom.png",
            "info.has_zoom?Difference"         : "output_2_zoom.png",
            "!info.has_zoom?Noisy"             : "input_1.png",
            "!info.has_zoom?Denoised"          : "output_1.png",
            "!info.has_zoom?Original"          : "input_0.sel.png",
            "!info.has_zoom?Difference"        : "output_2.png"
        },
      "style"         : "{'height':info.displayheight*ZoomFactor+'px'}" 
    },
    {
      "type"          : "text_file", 
      "label"         : "<p>RMSE and PSNR</p>",
      "contents"      : "stdout.txt",
      "style"         : "{'width':'40em','height':'4em','background-color':'#eee'}"
    }
  ]
}