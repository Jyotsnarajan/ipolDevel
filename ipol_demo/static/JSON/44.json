{ 
  "general": { 
    "demo_title"            :  "An Implementation of Combined Local-Global Optical Flow",
    "input_description"     : "Please select or upload the image pair to rectify. Both images must have the same size.",
    "param_description"     : "",
    "xlink_article"         : "http://www.ipol.im/pub/art/2015/44/",
    "input_condition"       : [ "input_size[0]==input_size[1]",
                                "badparams",
                                "The images must have the same size" ],
    "thumbnail_size"        : 64
  },
  "build":
    [
      {
        "build_type"    : "cmake",
        "url*previous"  : "http://www.ipol.im/pub/art/2015/44/clg_6.1.tgz", 
        "url"           : "http://151.80.24.28:8080/DemoSource/44/clg_6.1.tgz", 
        "srcdir"        : "clg_6.1",
        "binaries"      : [ ["../bin","test_clgof"] ],
        "flags"         : "-j4",
        "scripts"       : [ ["demo_scripts", "view_clg.sh"],  
                            ["demo_scripts", "run_clg_noview.sh"],
                            ["demo_scripts", "colorwheel.tiff"]]
      },
      {
        "build_type"    : "make",
        "url"           : "http://www.ipol.im/pub/art/2013/20/imscript_dec2011.tar.gz", 
        "srcdir"        : "imscript",
        "binaries"      : [ [".","bin/","backflow"] ],
       "flags"         : "-j CFLAGS=-O3 IIOFLAGS='-lpng -ltiff -ljpeg -lm'"
      }
    ]
  ,
  "inputs": [ 
      {
          "type"            : "image", 
          "description"     : "I1",
          "max_pixels"      : "1024 * 1024",
          "max_weight"      : 5242880,
          "dtype"           : "3x8i",
          "ext"             : ".png"
      }, 
      {
          "type"            : "image", 
          "description"     : "I2",
          "max_pixels"      : "1024 * 1024",
          "max_weight"      : 5242880,
          "dtype"           : "3x8i",
          "ext"             : ".png"
      }, 
      {
          "type"              : "flow", 
          "description"       : "Ground truth", 
          "ext"               : ".tiff",
          "required"          : false
      } 
    ],
  "params": 
    [
      {
        "id"            : "alpha",
        "type"          : "range", 
        "label"         : " &alpha;",
        "comments"      : "global regularization parameter (&alpha;>0. Higher values produce more homogeneus fields, &nbsp; lower values allow more variating displacement vectors in a given image region)",
        "values"        : { "min":0.1, "max":100, "step":0.1, "default": 15 }
      }
      ,
      {
        "id"            : "rho",
        "type"          : "range", 
        "label"         : " &rho;",
        "comments"      : "neighborhood size in local approach (size of Gaussian kernel = 2 &rho; + 1, &nbsp; &rho; = 0 implies no local smoothing)",
        "values"        : { "min":0.1, "max":100, "step":0.1, "default": 10 }
      }
      ,
      {
        "id"            : "sigma",
        "type"          : "range", 
        "label"         : " &sigma;",
        "comments"      : "Pre-processing Gaussian smoothing variance",
        "values"        : { "min":0.3, "max":10, "step":0.01, "default": 0.85 }
      }
    ],
  "run": [
      "ln -fs input_0.png  a.png ",
      "ln -fs input_1.png  b.png ",
      "ln -fs input_2.tiff t.tiff",
      "run_clg_noview.sh $alpha $rho $sigma 1000 1.9 10 0.65 1 0 >stdout.txt",
      "view_clg.sh ipoln  1",
      "view_clg.sh ipol   1",
      "view_clg.sh mid    1",
      "view_clg.sh arrows 1",
      "python:self.algo_meta['hastruth'] = os.path.isfile('input_2.tiff')"
  ]
  ,
  "archive":
    {
      "files" : { "input_0.png"             : "input #1",
                  "input_1.png"             : "input #2",
                  "input_2.tiff"            : "ground truth",
                  "stuff_clg.tiff"          : "flow",
                  "stuff_clg.png"           : "flow as RGB image"
                },
      "params" :  [ "alpha", "rho", "sigma" ]
    },
  "config":
    {
      "info_from_file": {  "sixerrors" : "sixerror_clg.txt"
                        }
    }
  ,
  "results": [
    {
      "type"          : "html_text", 
      "contents"      : [ 
        "'<table style=\"margin-left:0px;margin-right:auto;position:fixed;border:1px solid lightgray;padding:10px;top:0px;right:0px;z-index:102;\">",
        "<tr>",
          "<td>",
            "<label> Vectors: </label>",
            "<select name=\"colorcoding\" >",
              "<option selected=selected value=ipoln> IPOL colors (scaled, no level lines) </option>",
              "<option value=ipol   > IPOL colors (unscaled, with level lines)             </option>",
              "<option value=mid    > Middlebury colors                                    </option>",
              "<option value=arrows > Arrows                                               </option>",
            "</select><br/>",
          "</td>",
          "<td>",
            "<img id=\"zoomfactor_im\" style=\"height:64px\" src=\"'+ work_url+ '/cw.ipoln.1.png'+'\" />",
          "</td>",
        "</tr>",
        "</table>",
        "<script>",
            "$(\"select[name=colorcoding]\").change( ",
                "function() { ",
                    "var coding=$(\"select[name=colorcoding]\").val();",
                    "$(\"#zoomfactor_im\").attr(\"src\",\"'+work_url+ '/cw.\"+coding+\".1.png\");",
                    "$(\"#result_1\").data(\"image_gallery\").SetOnLoadAll(undefined);",
                    "$(\"#result_1\").data(\"image_gallery\").keep_dimensions_onload = true;",
                    "var c = $(\"#result_1\").data(\"image_gallery\").contents;",
                    "c[\"Optical flow\"]  =\"'+work_url+'stuff_clg.\"     +coding+\".1.png\";",
                    "if (c[\"Ground truth\"]) {",
                        "c[\"Ground truth\"]  =\"'+work_url+'t.\"             +coding+\".1.png\";",
                        "c[\"Endpoint error\"]=\"'+work_url+'stuff_clg_fmt.\" +coding+\".1.png\";",
                    "}",
                    "$(\"#result_1\").data(\"image_gallery\").BuildContents();",
                    "$(\"#result_1\").data(\"image_gallery\").UpdateSelection();",
                "}",
            ")",
        "</script>",
        "'"
      ]
    },
    {
      "type"          : "gallery",
      "contents"      : 
                        {   "Optical flow"                  : "stuff_clg.ipoln.1.png", 
                            "meta.hastruth?Ground truth"    : "t.ipoln.1.png",
                            "|flow|"                        : "stuff_clg_abs.png" ,
                            "I<sub>0</sub>"                 : "input_0.png" ,
                            "I<sub>1</sub>"                 : "input_1.png" ,
                            "div(flow)"                     : "stuff_clg_div.png",
                            "grad(flow)"                    : "stuff_clg_grad.png",
                            "Warped I<sub>1</sub>"          : "stuff_clg_inv.png",
                            "Warped difference"             : "stuff_clg_aminv.png" ,
                            "Warped average"                : "stuff_clg_apinv.png" ,
                            "meta.hastruth?Endpoint error"  : "stuff_clg_fmt.ipoln.1.png",
                            "meta.hastruth?Angular error"   : "stuff_clg_aerr.png"
                        },
      "options"       : { "minheight" : 150 }
    },
    {
      "type"          : "html_text", 
      "contents"          : [ 
          "'<b>Summary</b><br/>",
          "<div>",
          "<table border=1 cellpadding=6 cellspacing=0 style=\"margin-left:0px;margin-right:auto\">",
          "<tr bgcolor=#cccccc>",
            "<td ></td>",
            "<th >Running time</th>",
            "<th >Average Backprojection Error</th>",
            "'+ (meta.hastruth?'",
                "<th>Average Endpoint Error</th>",
                "<th>Average Angular Error</th>",
            "':'')",
            "+'",
          "</tr>",
          "<tr>",
            "<th bgcolor=#cccccc>phs</th>",
            "<td align=center>'+ info.run_time.toFixed(2)+' s</td>",
            "<td align=center>'+ info.sixerrors.split(\" \")[0]+'",
                            "<i style=\"font-size:x-small\">gray levels</i></td>",
            "'+ (meta.hastruth?'",
                "<td  align=center>'+info.sixerrors.split(\" \")[2]+' <i style=\"font-size:x-small\">pixels</i></td>",
                "<td  align=center>'+info.sixerrors.split(\" \")[4]+'&nbsp;ยบ</td>",
            "':'')",
            "+'",
          "</tr>",
          "</table>",
          "</div>'"        ]
    },
    {
      "type"          : "file_download", 
      "label"         : "<b>Download inputs:</b>",
      "contents"      : { "first image I1"  : "input_0.png", 
                          "second image I2" : "input_1.png",
                          "ground truth"    : "input_2.tiff"
                        }
    },
    {
      "type"          : "file_download", 
      "label"         : "<b>Download computed optical flow:</b>",
      "contents"      : { "tiff": "stuff_tvl1.tiff", 
                          "flo" : "stuff_tvl1.flo",
                          "uv"  : "stuff_tvl1.uv" }
    },
    {
      "type"          : "html_text", 
      "contents"      : [ 
        "<p style='font-size:small'>Note on formats:",
        "<ul style='font-size:small'>",
          "<li>The <tt>.tiff</tt> file is a two-channel image with floating-point samples.</li>",
          "<li>The <tt>.flo</tt> file is the same fomat as in the",
            "<a href = 'http://vision.middlebury.edu/flow/code/flow-code/README.txt'>",
              "Middlebury database",
            "</a>.</li>",
          "<li>The <tt>.uv</tt> file can be read and written by ",
            "<a href='http://dev.ipol.im/~coco/file_uv.h'>simple</a> code.</li>",
        "</ul></p>"
      ]
    }
  ]
}