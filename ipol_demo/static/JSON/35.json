{ 
  "general": { 
    "demo_title"            : "A Review of Classic Edge Detectors",
    "input_description"     : "Review of edge detection algorithms",
    "param_description"     : [
      "Set the parameters and run the algorithm.",
      "<i>Note: rgb images will be converted to grayscale.</i>"
    ],
    "xlink_article"         : "http://www.ipol.im/pub/pre/35/"
  }, 
  "build": [
    {
      "build_type"    : "make",
      "url*previous*" : "http://www.ipol.im/pub/art/2015/35/classic_edge_detectors_1.0.zip", 
      "url"           : "http://151.80.24.28:8080/DemoSource/35/classic_edge_detectors_1.0.tgz", 
      "srcdir"        : "classic_edge_detectors_1.0",
      "binaries"      : [ [".","edges"] ],
      "flags"         : "-j4",
      "scripts"       : [ [ "demo_scripts", "PythonInvert.py"] ]
    }
  ]
  ,
  "inputs": [ 
      {
          "type"            : "image", 
          "description"     : "input",
          "max_pixels"      : "1024 * 1024",
          "max_weight"      : 5242880,
          "dtype"           : "1x8i",
          "ext"             : ".png"
      }
    ],
  "params": [
    {
      "type"          : "range",
      "label"         : "th_fded",
      "comments"      : "gradient threshold",
      "id"            : "th_fded",
      "values"        : { "min":0.0, "max":1.0, "step":0.005, "default": 0.1}
    },
    {
      "type"          : "range",
      "label"         : "&rho;",
      "comments"      : "radius threshold from center of the pixel",
      "id"            : "rho",
      "values"        : { "min":0, "max":0.707, "step":0.001, "default": 0.4 }
    },
    {
      "type"          : "range",
      "label"         : "&sigma;",
      "comments"      : "blur standard deviation",
      "id"            : "sigma",
      "values"        : { "min":0, "max":20, "step":0.1, "default":3 }
    },
    {
      "type"          : "range",
      "label"         : "n",
      "comments"      : "kernel size",
      "id"            : "n",
      "values"        : { "min":1, "max":101, "step":2, "default": 25 }
    },
    {
      "type"          : "range",
      "label"         : "tzc",
      "comments"      : "zero-crossing threshold",
      "id"            : "tzc",
      "values"        : { "min":0, "max":1, "step":0.005, "default":0.07 }
    },
    {
      "type"          : "range",
      "label"         : "&sigma;",
      "comments"      : "blur standard deviation",
      "id"            : "sigma2",
      "values"        : { "min":0, "max":20, "step":0.1, "default":3 }
    },
    {
      "type"          : "range",
      "label"         : "n",
      "comments"      : "kernel size",
      "id"            : "n2",
      "values"        : { "min":1, "max":101, "step":2, "default": 29 }
    },
    {
      "type"          : "range",
      "label"         : "tzc",
      "comments"      : "zero-crossing threshold",
      "id"            : "tzc2",
      "values"        : { "min":0, "max":1, "step":0.005, "default":0.13 }
    },
    {
      "id"            : "inv",
      "type"          : "selection_radio", 
      "label"         : "Type of display",
      "values"        : {"Black on white (inverted)":"1", "White on black (normal)":"0"},
      "default_value" : "1"
    }
  ],
  "params_layout": [
    [ "Roberts, Prewitt and Sobel parameters",      [0]],
    [ "Haralick parameters",                        [1]],
    [ "Marr-Hildreth (Gaussian kernel) parameters", [2,3,4]],
    [ "Marr-Hildreth (LoG kernel)",                 [5,6,7]],
    [ "Result display",                             [8]]
  ],
  "results": [
    {
      "type"          : "gallery",
      "label"         : "Images",
      "contents"      : { "Input"             : "input_0.sel.png", 
                          "Robert"            : "out_roberts.png",
                          "Prewitt"           : "out_prewitt.png",
                          "Sobel"             : "out_sobel.png",
                          "Haralick"          : "out_haralick.png",
                          "Marr-Hildreth"     : "out_mh.png",
                          "Marr-Hildreth-log" : "out_mhl.png"
                        },
      "style"         : "{'height':sizeY*ZoomFactor+'px'}" 
    }
  ],
  "archive":
    {
      "files" : { "input_0.png"     : "input image",
                  "input_0.sel.png" : "cropped input image",
                  "out_roberts.png" : "output image of Roberts algorithm",
                  "out_prewitt.png" : "output image of Prewitt algorithm",
                  "out_sobel.png"   : "output image of Sobel algorithm",
                  "out_mh.png"      : "output image of Marr-Hildreth algorithm (Gaussian kernel)",
                  "out_mhl.png"     : "output image of Marr-Hildreth algorithm (LoG kernel)",
                  "out_haralick.png": "output image of Haralick algorithm"
                },
      "params" :  [ "th_fded", "rho", "sigma", "n", "tzc", "sigma2", "n2", "tzc2"]
    }
  ,
  "run":  [
            "edges -r $th_fded -p $th_fded -s $th_fded -m $sigma $n $tzc -l $sigma2 $n2 $tzc2 -h $rho input_0.sel.png",
            "PythonInvert.py -i $inv out_roberts.png out_prewitt.png out_sobel.png out_mh.png out_mhl.png out_haralick.png"
          ]
}
